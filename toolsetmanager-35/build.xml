<!--
+==========================================================================
| New Stencyl Extension
+==========================================================================
-->

<project name="stencyl" basedir="." default="dist">
	
	<!-- This extension can be built as-is. Make sure to set the properties in "build-helper.properties". -->
	
	<property name="pkg" value="com/byrobingames/manager" />
	
	<!-- The "main" class must extends BaseExtension.
	<property name="main" value="com.byrobingames.manager.ByRobinManagerExtension" />-->
	
	<!-- Alternatively, you can specify that this is a game extension, and the main class must extends "GameExtension".-->
	<property name="main" value="com.byrobingames.manager.ByRobinGameExtension" />
	<property name="type" value="game" />
	
	<property name="dependsOn" value="engine-byrobinextensionmanager-0.1.8,stencyl-3.5.0,java-1.8" />
		
	
	<!-- Set "dependsOn" if this extensions depends on other extensions.
	Example 1:
	<property name="dependsOn" value="engine-com.polydes.datastruct-1.1.0" />
	
	Example 2 - comma delimited, "engine", "stencyl", "java", and "toolset" dependencies:
	<property name="dependsOn" value="engine-com.polydes.datastruct-1.1.0,stencyl-3.4.0,java-1.8,toolset-com.polydes.datastruct-1.0.0" />
	-->
	
	<property name="name" value="byRobin Extension Manager" />
	<property name="description" value="Manage byRobin Engine Extension for Stencyl 3.5" />
	<property name="author" value="Robin Schaafsma" />
	<property name="website" value="https://byrobingames.github.io" />
	<property name="internalVersion" value="8" />
	<property name="version" value="0.1.0" />
	
	<!-- Set "repository" if this extension is part of a third-party repository where it can be updated. -->
	<property name="repository" value="http://www.polydes.com/byrobingames" />
	
	<include file="build-helper.xml" as="helper" />
	
	<target name="dist">
		
		<!-- Set "usingLibs" to true to automatically bundle .jar files in the "lib" folder.
		<var name="usinglibs" value="true" />
		-->
		
		<!-- Add .jars to "clspath" if you need them but don't want them bundled. For example, a toolset extension dependency.
		<var name="clspath" value="${clspath}:C:/Path/to/extension.jar" />
		-->
		
		<antcall>
			
			<target name="helper.compile" />
			
			<target name="helper.copy-resources" />
			
			<target name="helper.makejar" />
			
		</antcall>
		
	</target>

</project>